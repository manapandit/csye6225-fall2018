{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Sample Template for Auto Scaling, Application load balancing and DNS",
    "Parameters": {
        "EC2key": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default" : "EC2key"
        },
        "InstanceType": {
            "Description": "EC2 instance type.",
            "Type": "String",
            "Default": "t2.micro"
        },
        "myVPC": {
            "Description": "VPC.",
            "Type": "String"
        },
        "ec2Name": {
            "Description": "Ec2 name",
            "Type": "String"
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to ssh/ https to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        
        "mySubnetId1": {
            "Description": "VPC SubnetId1",
            "Type": "String"
        },
        "mySubnetId2": {
            "Description": "VPC SubnetId2",
            "Type": "String"
          },
 
        "mySubnetId3": {
           "Description": "VPC SubnetId3",
           "Type": "String"
         },

         "mySubnetId4": {
            "Description": "VPC SubnetId4",
            "Type": "String"
          },
 
         "mySubnetId5": {
           "Description": "VPC SubnetId5",
           "Type": "String"
         },
         "mySubnetId6": {
            "Description": "VPC SubnetId6",
            "Type": "String"
          },
        "Certificate": {
            "Description": "certificate used for listener",
            "Type": "String"
        },
        "hostedZoneName": {
            "Type": "String",
            "Description": "The DNS name of an existing Amazon Route 53 hosted zone",
            "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
            "ConstraintDescription": "must be a valid DNS zone name."
        },
        "hostedZoneId": {
            "Description": "Hosted Zone Id",
            "Type": "String"
        },
        "InsProfile": {
            "Description": "The ec2 role",
            "Type": "String"
        },
        "DBEndpoint": {
            "Description": "The database endpoint",
            "Type": "String"
        },
        "DBName": {
            "Default": "csye6225",
            "Description" : "The database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
          },
      
          "DBUser": {
            "Default": "csye6225master",
            "NoEcho": "true",
            "Description" : "The database admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
          },
      
          "DBPassword": {
            "Default": "csye6225password",
            "NoEcho": "true",
            "Description" : "The database admin account password",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "41",
            "AllowedPattern" : "[a-zA-Z0-9]+",
            "ConstraintDescription" : "must contain only alphanumeric characters."
          },
      
          "MultiAZ" : {
            "Description" : "Multi-AZ master database",
            "Type" : "String",
            "Default" : "false",
            "AllowedValues" : [ "true", "false" ],
            "ConstraintDescription" : "must be true or false."
          },
      
           "DBAllocatedStorage": {
            "Default": "5",
            "Description" : "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription" : "must be between 5 and 1024Gb."
          },
      
          "DBInstanceClass": {
            "Description" : "The database instance type",
            "Type": "String",
            "Default": "db.t2.medium",
            "AllowedValues" : [ "db.t1.micro", "db.m1.small", "db.t2.medium", "db.m1.large"],
            "ConstraintDescription" : "must select a valid database instance type."
          },
  
          "PublicAccess" : {
            "Description" : "Accessibility to DBInstance",
            "Type" : "String",
            "Default" : "false"
        },
        
  
        "S3Name" : {
            "Description" : "Name of the S3 Bucket",
            "Type" : "String"
        },
  
        "DBIdentifier" :{
            "Type" : "String",
            "Default" : "csye6225-spring2018"
        },
  
        "HashKeyElementName" : {
              "Description" : "HashType PrimaryKey Name",
              "Type" : "String",
              "Default" : "EmailId",
              "AllowedPattern" : "[a-zA-Z0-9]*",
              "MinLength": "1",
              "MaxLength": "2048",
              "ConstraintDescription" : "must contain only alphanumberic characters"
            },
  
        "HashKeyElementType" : {
            "Description" : "HashType PrimaryKey Type",
            "Type" : "String",
            "Default" : "S",
            "AllowedPattern" : "[S|N]",
            "MinLength": "1",
            "MaxLength": "1",
            "ConstraintDescription" : "must be either S or N"
            },
  
              "ReadCapacityUnits" : {
                "Description" : "Provisioned read throughput",
                "Type" : "Number",
                "Default" : "5",
                "MinValue": "5",
                "MaxValue": "10000",
                "ConstraintDescription" : "must be between 5 and 10000"
              },
          
              "WriteCapacityUnits" : {
                "Description" : "Provisioned write throughput",
                "Type" : "Number",
                "Default" : "10",
                "MinValue": "5",
                "MaxValue": "10000",
                "ConstraintDescription" : "must be between 5 and 10000"
              }       
     },

    "Mappings": {
        "AWSInstanceType2Arch": {
            "t2.micro": {
                "Arch": "HVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "HVM64": "ami-9887c6e7"
            }
        }
        },
        
     
           
    "Conditions": {
        "Is-EC2-VPC": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-east-1"
            ]
        }
    },
    "Resources": {
        "MyDNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
              "HostedZoneName" : { "Fn::Join" : [ "", [{"Ref" : "hostedZoneName"}, "." ]]},
              "Comment" : "DNS name for my instance.",
              "Name" : { "Fn::Join" : [ "", [{"Ref" : "AWS::Region"}, ".", {"Ref" : "hostedZoneName"} ,"."]]},
              "Type" : "TXT",
              "TTL" : "60",
              "ResourceRecords" : ["\"csye-6225-fall2018\""]
            }
        },
 
        "DBSubnetGroup" : {
           "Type" : "AWS::RDS::DBSubnetGroup",
           "Properties" : {
              "DBSubnetGroupDescription" : "description",
              "SubnetIds" : [{"Ref": "mySubnetId4"}, {"Ref": "mySubnetId5"}] 
           }
        },
      
   
    
 
   "DBSecurityGroup" : {
   "Type" : "AWS::EC2::SecurityGroup",
   "Properties" : {
      "GroupDescription" : "Allow http to client host",
      "VpcId" : {"Ref" : "myVPC"},
      "Tags": [{"Key": "Name","Value": {"Fn::Join": ["",[{"Ref": "AWS::StackName"},"-csye6225-rds"]]}}],
      "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : 3306,
            "ToPort" : 3306,
            "SourceSecurityGroupId" : { "Ref": "WebServersSG"}
         }]
   }
 },   
 
 "WebServersSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Web server Security Group",
                "VpcId" : {"Ref" : "myVPC"},
                "Tags": [{"Key": "Name","Value": {"Fn::Join": ["",[{"Ref": "AWS::StackName"},"-csye6225-webapp"]]}}],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 22,
                        "ToPort": 22
                    },
 
                     {
                        "IpProtocol": "tcp",
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 443,
                        "ToPort": 443
                    },
                    {
                     "IpProtocol": "tcp",
                     "CidrIp": "0.0.0.0/0",
                     "FromPort": 8080,
                     "ToPort": 8080
                     },
 
                     {
                        "IpProtocol": "tcp",
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 80,
                        "ToPort": 80
                    }
                ]
            }
 
          },
 
          "MasterDB" : {
           "Type" : "AWS::RDS::DBInstance",
           "Properties" : {
             "DBName" : { "Ref" : "DBName" },
             "DBInstanceClass" : { "Ref" : "DBInstanceClass" },
             "DBInstanceIdentifier" : {"Ref" : "DBIdentifier"},
             "Engine" : "MySQL",
             "MasterUsername" : { "Ref" : "DBUser" },
             "MasterUserPassword" : { "Ref" : "DBPassword" },
             "MultiAZ" : { "Ref" : "MultiAZ" },
             "AllocatedStorage" : {"Ref" : "DBAllocatedStorage"},
             "PubliclyAccessible" : {"Ref" : "PublicAccess"},
             "DBSubnetGroupName" : {"Ref": "DBSubnetGroup"},
             "VPCSecurityGroups": { "Fn::If" : [ "Is-EC2-VPC", [ { "Fn::GetAtt": [ "DBSecurityGroup", "GroupId" ] } ], { "Ref" : "AWS::NoValue"}]}
           },
           "DeletionPolicy" : "Snapshot"
         },
 
         "S3Bucket" : {
           "Type" : "AWS::S3::Bucket",
           "Properties" :{
           "BucketName" : {"Ref" : "S3Name"}
         }
       },
 
       "myDynamoDBTable" : {
           "Type" : "AWS::DynamoDB::Table",
           "Properties" : {
             "AttributeDefinitions": [ { 
               "AttributeName" : {"Ref" : "HashKeyElementName"},
               "AttributeType" : {"Ref" : "HashKeyElementType"}
             } ],
             "KeySchema": [
               { "AttributeName": {"Ref" : "HashKeyElementName"}, "KeyType": "HASH" }
             ],
             "ProvisionedThroughput" : {
               "ReadCapacityUnits" : {"Ref" : "ReadCapacityUnits"},
               "WriteCapacityUnits" : {"Ref" : "WriteCapacityUnits"}
             },
             "TimeToLiveSpecification": {
                 "AttributeName": "TimeToLive",
                 "Enabled": "TRUE"
             },
 
             "TableName" : "csye6225"           
           }
 
       },
       "LaunchConfig": {
        "Type": "AWS::AutoScaling::LaunchConfiguration",
        "Properties": {
            "ImageId": {
                "Fn::FindInMap": [
                    "AWSRegionArch2AMI",
                    {
                        "Ref": "AWS::Region"
                    },
                    {
                        "Fn::FindInMap": [
                            "AWSInstanceType2Arch",
                            {
                                "Ref": "InstanceType"
                            },
                            "Arch"
                        ]
                    }
                ]
            },
            "InstanceType": {
                "Ref": "InstanceType"
            },
            "AssociatePublicIpAddress": "true",
            "KeyName": {
                "Ref": "EC2key"
            },
            "LaunchConfigurationName": "asg_launch_config",
            "InstanceMonitoring": "false",
            "SecurityGroups": [
                {
                    "Ref": "WebServersSG"
                }
            ],
            "IamInstanceProfile": {
                "Ref": "InsProfile"
            },
            "BlockDeviceMappings": [
                {
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                        "VolumeSize": "20",
                        "DeleteOnTermination": "true",
                        "VolumeType": "gp2"
                    }
                }
            ],
            "UserData": {
                "Fn::Base64": {
                    "Fn::Join": [
                        "\n",
                        [
                            "#!/bin/bash",
                            "sudo su",
                            "yum update -y",
                            "yum install httpd -y",
                            "systemctl enable httpd.service",
                            "systemctl start httpd.service",
                            "yum install awscli -y",
                            "yum install ruby -y",
                            "yum install wget -y",
                            "yum install python -y",
                            "sudo yum install unzip -y",
                            "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
                            "chmod +x ./install",
                            "./install auto",
                            "service codedeploy-agent start",
                            "mkdir -p /var/awslogs/etc/",
                            "cd /var/awslogs/etc/",
                            "wget https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip",
                            "unzip AmazonCloudWatchAgent.zip",
                            "chmod +x install.sh",
                            "sh install.sh",
                            "mkdir -p /usr/share/collectd",
                            "cd /usr/share/collectd",
                            "touch types.db",
                            "cd /opt/aws/amazon-cloudwatch-agent/bin/",
                            "touch config.json",
                            "echo '{\"agent\": {\"metrics_collection_interval\": 10,\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"},\"logs\": {\"logs_collected\": {\"files\": {\"collect_list\": [{\"file_path\": \"/opt/tomcat/logs/catalina.out\",\"log_group_name\": \"csye6225_fall2018\",\"log_stream_name\": \"webapp\",\"timestamp_format\": \"%H:%M:%S %y %b %-d\"}]}}},\"metrics\": {\"metrics_collected\": {\"statsd\": {\"service_address\": \":8125\",\"metrics_collection_interval\": 10,\"metrics_aggregation_interval\": 0}}}}' >> config.json",
                            "cd /opt/aws/amazon-cloudwatch-agent/bin",
                            "./amazon-cloudwatch-agent-ctl -m ec2 -a fetch-config -c file:config.json -s",
                            "yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                            "systemctl start ntpd",
                            "systemctl enable ntpd",
                            "groupadd tomcat",
                            "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                            "cd /tmp",
                            "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                            "mkdir /opt/tomcat",
                            "sudo tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                            "cd /opt/tomcat",
                            "chgrp -R tomcat /opt/tomcat",
                            "chmod -R g+r conf",
                            "chmod g+x conf",
                            "chown -R tomcat webapps/ work/ temp/ logs/",
                            "cd /opt && sudo chown -R tomcat tomcat/",
                            "#cd /usr/lib/systemd/system",
                            "cd /opt/tomcat",
                            "mkdir uploads",
                            "cd /opt/tomcat",
                            "cd /etc/systemd/system",
                            "touch tomcat.service",
                            "echo '[Unit]' > tomcat.service",
                            "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                            "echo 'After=syslog.target network.target' >> tomcat.service",
                            "echo '[Service]' >> tomcat.service",
                            "echo 'Type=forking' >> tomcat.service",
                            "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                            "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                            "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                            "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                            "#echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                            "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\"' >> tomcat.service",
                            "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                            "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                            "echo 'User=tomcat' >> tomcat.service",
                            "echo 'Group=tomcat' >> tomcat.service",
                            "echo 'UMask=0007' >> tomcat.service",
                            "echo 'RestartSec=10' >> tomcat.service",
                            "echo 'Restart=always' >> tomcat.service",
                            "echo '[Install]' >> tomcat.service",
                            "echo 'WantedBy=multi-user.target' >> tomcat.service",
                            "#systemctl daemon-reload",
                            "cd /opt/tomcat/bin",
                            "touch setenv.sh",
                            "echo 'JAVA_OPTS=\"-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true\"' >> setenv.sh",
                            "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=Dev\"' >> setenv.sh",
                            {
                                "Fn::Sub": [
                                    "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=jdbc:mysql://${DBEndpoint}:3306/csye6225\"' >> setenv.sh",
                                    {
                                        "DBEnpoint": {
                                            "Ref": "DBEndpoint"
                                        }
                                    }
                                ]
                            },
                            "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=csye6225master\"'  >> setenv.sh",
                            "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=csye6225password\"'  >> setenv.sh",
                            "#systemctl daemon-reload",
                            "systemctl start amazon-cloudwatch-agent.service",
                            "systemctl stop amazon-cloudwatch-agent.service",
                            "systemctl restart amazon-cloudwatch-agent.service",
                            "systemctl enable tomcat.service",
                            "systemctl start tomcat.service",
                            "yum install mariadb mariadb-server -y",
                            "systemctl enable mariadb.service",
                            "systemctl start mariadb.service"
                        ]
                    ]
                }
            }
        }
    },
    "WebServerGroup": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
            "AutoScalingGroupName": "MyAutoScale",
            "Cooldown": "60",
            "DesiredCapacity": "3",
            "VPCZoneIdentifier": [
                {
                    "Ref": "mySubnetId1"
                },
                {
                    "Ref": "mySubnetId2"
                },
                {
                    "Ref": "mySubnetId3"
                }
            ],
            "LaunchConfigurationName": {
                "Ref": "LaunchConfig"
            },
            "TargetGroupARNs": [
                {
                    "Ref": "TargetGroup"
                }
            ],
            "MinSize": "3",
            "MaxSize": "10",
            "Tags": [
                {
                    "Key": "Name",
                    "Value": {
                        "Ref": "ec2Name"
                    },
                    "PropagateAtLaunch": "true"
                }
            ]
        },
        "DependsOn": "Listener"
    },
    "WebServerScaleUpPolicy": {
        "Type": "AWS::AutoScaling::ScalingPolicy",
        "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
                "Ref": "WebServerGroup"
            },
            "Cooldown": "60",
            "ScalingAdjustment": "1"
        }
    },
    "WebServerScaleDownPolicy": {
        "Type": "AWS::AutoScaling::ScalingPolicy",
        "Properties": {
            "AdjustmentType": "ChangeInCapacity",
            "AutoScalingGroupName": {
                "Ref": "WebServerGroup"
            },
            "Cooldown": "60",
            "ScalingAdjustment": "-1"
        }
    },
    "CPUAlarmHigh": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
            "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": "300",
            "EvaluationPeriods": "2",
            "Threshold": "80",
            "AlarmActions": [
                {
                    "Ref": "WebServerScaleUpPolicy"
                }
            ],
            "Dimensions": [
                {
                    "Name": "AutoScalingGroupName",
                    "Value": {
                        "Ref": "WebServerGroup"
                    }
                }
            ],
            "ComparisonOperator": "GreaterThanThreshold"
        }
    },
    "CPUAlarmLow": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
            "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": "300",
            "EvaluationPeriods": "2",
            "Threshold": "60",
            "AlarmActions": [
                {
                    "Ref": "WebServerScaleDownPolicy"
                }
            ],
            "Dimensions": [
                {
                    "Name": "AutoScalingGroupName",
                    "Value": {
                        "Ref": "WebServerGroup"
                    }
                }
            ],
            "ComparisonOperator": "LessThanThreshold"
        }
    },
    "ElasticLoadBalancer": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
            "Name": "MyALB",
            "Scheme": "internet-facing",
            "Subnets": [
                {
                    "Ref": "mySubnetId1"
                },
                {
                    "Ref": "mySubnetId2"
                },
                {
                    "Ref": "mySubnetId3"
                }
            ],
            "SecurityGroups": [
                {
                    "Ref": "LoadBalancerSecurityGroup"
                }
            ],
            "Type": "application",
            "IpAddressType": "ipv4"
        }
    },
    "Listener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
            "DefaultActions": [
                {
                    "Type": "forward",
                    "TargetGroupArn": {
                        "Ref": "TargetGroup"
                    }
                }
            ],
            "LoadBalancerArn": {
                "Ref": "ElasticLoadBalancer"
            },
            "Port": "443",
            "Protocol": "HTTPS",
            "Certificates": [
                {
                    "CertificateArn": {
                        "Ref": "Certificate"
                    }
                }
            ]
        }
    },
    "TargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
            "HealthCheckIntervalSeconds": 30,
            "UnhealthyThresholdCount": 10,
            "HealthCheckPath": "/",
            "TargetGroupAttributes": [
                {
                    "Key": "deregistration_delay.timeout_seconds",
                    "Value": "20"
                }
            ],
            "Name": "MyTargetGroup",
            "HealthCheckPort": 8080,
            "TargetType": "instance",
            "Port": 8080,
            "Protocol": "HTTP",
            "VpcId": {
                "Ref": "myVPC"
            }
        }
    },
    "LoadBalancerSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupName": "ALB_SG",
            "GroupDescription": "Enable HTTP access via port 80, SSH access via port 22",
            "VpcId": {
                "Ref": "myVPC"
            },
            "SecurityGroupIngress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": {
                        "Ref": "SSHLocation"
                    }
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "CidrIp": {
                        "Ref": "SSHLocation"
                    }
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "443",
                    "ToPort": "443",
                    "CidrIp": {
                        "Ref": "SSHLocation"
                    }
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "8080",
                    "ToPort": "8080",
                    "CidrIp": {
                        "Ref": "SSHLocation"
                    }
                }
            ],
            "SecurityGroupEgress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "8080",
                    "ToPort": "8080",
                    "DestinationSecurityGroupId": {
                        "Ref": "WebServersSG"
                    }
                }
            ],
            "Tags": [
                {
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "-csye6225-launch-config"
                            ]
                        ]
                    }
                }
            ]
        }
    },
    "ResourceRecords": {
        "Type": "AWS::Route53::RecordSet",
        "Properties": {
            "HostedZoneId": {
                "Ref": "hostedZoneId"
            },
            "Name": {
                "Ref": "hostedZoneName"
            },
            "AliasTarget": {
                "HostedZoneId": {
                    "Fn::GetAtt": [
                        "ElasticLoadBalancer",
                        "CanonicalHostedZoneID"
                    ]
                },
                "DNSName": {
                    "Fn::GetAtt": [
                        "ElasticLoadBalancer",
                        "DNSName"
                    ]
                }
            },
            "Type": "A"
        }
    },
    "CodeDeployServiceRoleforAuto": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "RoleName": "CodeDeployServiceRoleforAuto",
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "codedeploy.amazonaws.com"
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            },
            "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
            ],
            "Path": "/"
        }
    },
    "DeploymentGroupAutoscalling": {
        "Type": "AWS::CodeDeploy::DeploymentGroup",
        "Properties": {
            "ApplicationName": "CSYE6225CodeDeployApplication",
            "DeploymentGroupName": "Codedeploy_groupname_autoscalling",
            "DeploymentStyle": {
                "DeploymentType": "IN_PLACE",
                "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
            },
            "LoadBalancerInfo": {
                "ElbInfoList": [
                    {
                        "Name": "MyALB"
                    }
                ]
            },
            "AutoScalingGroups": [
                {
                    "Ref": "WebServerGroup"
                }
            ],
            "Ec2TagFilters": [
                {
                    "Key": "Name",
                    "Type": "KEY_AND_VALUE",
                    "Value": {
                        "Ref": "ec2Name"
                    }
                }
            ],
            "ServiceRoleArn": {
                "Fn::GetAtt": [
                    "CodeDeployServiceRoleforAuto",
                    "Arn"
                ]
            }
        }
    }
}
}
